-
  Standard flow from a new RFQ to a PO.
-
  Create RFQ
-
  !record {model: purchase.order, id: purchase_order_ext_rfq2order1}:
    partner_id: base.res_partner_1
    invoice_method: order
    date_order: '2013-08-02 00:00:00'
    bid_validity: '2013-08-15'
    order_line:
      - product_id: product.product_product_15
        product_qty: 15.0
        date_planned: '2013-08-30'
      - product_id: product.product_product_25
        product_qty: 5.0
      - product_id: product.product_product_27
        product_qty: 4.0
-
  All prices must be 0.
-
  !python {model: purchase.order, id: purchase_order_ext_rfq2order1}: |
    from nose.tools import *

    for line in self.order_line:
      assert_equal(line.price_subtotal, 0)
-
  Type must be 'rfq' and the total untaxed amount of the RFQ is 0.
-
  !assert {model: purchase.order, id: purchase_order_ext_rfq2order1, string: The amount of RFQ is not correctly computed}:
    - type == 'rfq'
    - state == 'draft'
    - amount_untaxed == 0
-
  I print the RFQ.
-
  !python {model: purchase.order}: |
    self.print_quotation(cr, uid, [ref("purchase_order_ext_rfq2order1")])
-
  I check the "RFQ sent" status.
-
  !assert {model: purchase.order, id: purchase_order_ext_rfq2order1}:
    - type == 'rfq'
    - state == 'sent'
-
  I encode the Bid. I set a price on the lines.
-
  !python {model: purchase.order}: |
    line_ids = self.read(cr, uid, ref("purchase_order_ext_rfq2order1"), ['order_line'], load='_classic_write')['order_line']
    self.pool.get('purchase.order.line').write(cr, uid, line_ids, {'price_unit': 79.80})
-
  I run the 'Bid encoded' wizard. I fill the date.
-
  !record {model: purchase.action_modal.datetime, id: purchase_order_ext_rfq2order1_bidencoded}:
    datetime: '2013-08-10 00:00:00'
-
  I run the 'Bid encoded' wizard. I confirm the wizard.
-
  !python {model: purchase.order}: |
    self.bid_received_ok(cr, uid, [ref("purchase_order_ext_rfq2order1")],{'active_id':ref("purchase_order_ext_rfq2order1_bidencoded")})
-
  I check the "Bid Encoded" status.
-
  !assert {model: purchase.order, id: purchase_order_ext_rfq2order1}:
    - type == 'bid'
    - state == 'bid'
-
  I convert to PO
-
  !python {model: purchase.order, id: purchase_order_ext_rfq2order1}: |
    self.signal_workflow('draft_po')
-
  I check the "Draft PO" status.
-
  !assert {model: purchase.order, id: purchase_order_ext_rfq2order1}:
    - type == 'purchase'
    - state == 'draftpo'
-
  I confirm the draft PO.
-
  !python {model: purchase.order, id: purchase_order_ext_rfq2order1}: |
    self.signal_workflow('purchase_confirm')
-
  I check the "Approved" status.
-
  !assert {model: purchase.order, id: purchase_order_ext_rfq2order1}:
    - type == 'purchase'
    - state == 'approved'
